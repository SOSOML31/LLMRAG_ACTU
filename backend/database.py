from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime  # Import des types de colonnes SQL
from sqlalchemy.orm import sessionmaker, declarative_base  # ORM pour g√©rer la base
from datetime import datetime  # Gestion des dates et heures

##############################################################################################################################################################################
##############################################################################################################################################################################
##############################################################################################################################################################################
#  üéØ Ce script configure la connexion √† PostgreSQL et d√©finit la structure de la table "articles".         #################################################################
##############################################################################################################################################################################
##############################################################################################################################################################################
##############################################################################################################################################################################

# üìå 1Ô∏è‚É£ Configuration de la connexion √† PostgreSQL
DB_URL = "postgresql://postgres:931752@localhost:5432/actullm"  # ‚ö†Ô∏è Remplace par tes propres identifiants
engine = create_engine(DB_URL)  # Cr√©ation du moteur de connexion SQLAlchemy
# üìå 2Ô∏è‚É£ Cr√©ation de la session pour interagir avec la base de donn√©es
SessionLocal = sessionmaker(bind=engine)  # G√©n√®re des sessions pour interagir avec la base
# üìå 3Ô∏è‚É£ D√©finition de la classe de base pour les mod√®les SQLAlchemy
Base = declarative_base()  # Classe de base pour les mod√®les ORM
# üìå 4Ô∏è‚É£ D√©finition du mod√®le de la table "articles"
class Article(Base):
    """
    üéØ Mod√®le SQLAlchemy repr√©sentant un article stock√© dans la base de donn√©es.
    """
    __tablename__ = "articles"  # Nom de la table dans PostgreSQL

    id = Column(Integer, primary_key=True, index=True)  # ID unique auto-incr√©ment√©
    title = Column(String, index=True)  # Titre de l'article (index√© pour les recherches)
    url = Column(String, unique=True, index=True)  # URL de l'article (doit √™tre unique)
    content = Column(Text)  # Contenu texte de l'article
    created_at = Column(DateTime, default=datetime.utcnow)  # Date de cr√©ation (automatique)

# üìå 5Ô∏è‚É£ Fonction pour cr√©er les tables dans la base de donn√©es
def create_tables():
    """
        Cette fonction cr√©e la table "articles" dans la base de donn√©es si elle n'existe pas.
    """
    Base.metadata.create_all(engine)  # Cr√©er les tables bas√©es sur les mod√®les d√©finis

# üìå 6Ô∏è‚É£ Lancer la cr√©ation de la base de donn√©es
if __name__ == "__main__":
    create_tables()  # Appel de la fonction pour cr√©er les tables
    print("‚úÖ Base de donn√©es et tables cr√©√©es avec succ√®s.")  # Message de confirmation